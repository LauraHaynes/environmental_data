---
title: "final_R_reference"
output: html_document
date: "2022-11-29"
editor_options: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# R Reference Guide {.tabset .tabset-pills}

<style>
  .nav-pills>li>a:hover, .nav-pills>li>a:focus, .nav-pills>li.active>a,     .nav-pills>li.active>a:hover, .nav-pills>li.active>a:focus{
    background-color: #269067;
  }
</style>


## Loading Data and Packages {.tabset .tabset-pills}

### How to install packages:

\# load a package not pre-installed into R:

install.packages("package name")

require(package name)

\# Use library() to see what R packages are installed

#### Palmer Penguins Example

install.packages("palmerpenguins")

require (palmerpenguins)

#library() also works:

library(palmerpenguins)

### How to load data:

require(here)

#here() finds files within the directory the R project is located

vec_name = read.csv( here("data",
"data_name.csv")

#### Ginkgo Data Example

require(here)

dat_ginkgo = read.csv( here("data", "ginkgo_data_2021.csv") )


\# use head to see vector data

head(dat_ginkgo)


## Data Structures {.tabset .tabset-pills}

### Function c()

The function c() combines arguments into a vector (a 1-dimensional data
structure consisting of 1 or more elements).

All of the elements must be of the same type. I can't combine character
and numeric types in the same call to c()

Here's two examples using numeric and character data types:

```{r}

# Create a vector of numbers:

num_vec = c(1, 4, 8, 9, 13)

# Create a vector of characters:

char_vec = c("a", "fish", "data is cool")

#I can show the contents of a vector by typing the name of the vector, or using the print() function.

# Typing the name of the vector into the console prints the contents

num_vec 

# The print() function accomplishes the same task:

print(char_vec)

```


### Function length()

Get or set the length of vectors (including lists) and factors, and of
any other R object for which a method has been defined. For vectors
(including lists) and factors the length is the number of elements.

Example 1:
```{r}
# this prints "5" 

length(num_vec)
```

Example 2:
```{r}

n = 12345

vec_1 = sample(12, n, replace = TRUE)

head(vec_1)

```


### Function matrix()

A matrix is a collection of elements of the same data type (numeric,
character, or logical) arranged into a fixed number of rows and columns.

```{r}
#Example:

my_vec = 1:6

my_vec

mat_1 = matrix(my_vec, nrow = 3)

mat_1
```




### Function data.frame()
collections of variables which share many of the properties of matrices and of lists, used as the fundamental data structure by most of R's modeling software
```{r}
# call data into a data.frame()
require(here)
dat_ginkgo = read.csv( here("data", "ginkgo_data_2021.csv") )

#dat_ginkgo is a data frame

```


### dat_ginkgo example
```{r}

#returns number of rows in the dataset

nrow(dat_ginkgo)

#returns number of columns in the dataset

ncol(dat_ginkgo)

#returns all dimensions of the data set (both nrow & ncol)
dim(dat_ginkgo)

```


## Subsetting

### Example 1

Use subset() to select & exclude variables or observations


Here subset selects only ginkgo trees that had seeds present at the site


```{r}

ginkgo_subset = subset(dat_ginkgo, seeds_present == "TRUE", na.rm = FALSE)
```

```{r include=FALSE}
#select first row of the ginkgo data using brackets

dat_ginkgo[1,]

#select the element in row 2, column 3

dat_ginkgo[2,3]

#select the 3rd column of the ginkgo data

dat_ginkgo[,3]

```


### Example 2
```{r}

require(palmerpenguins)

adelie = subset(penguins, species == "adelie")

#You can also use =! to exclude a species
```


## Numerical Data Exploration
```{r}
#summary() will show the 5 # summaries for all columns in the data
summary(dat_ginkgo)

#use $ to call to a specific subset of data

mean(dat_ginkgo$max_depth)
sd(dat_ginkgo$max_depth)
```

## Graphical Data Exploration {.tabset .tabset-pills}

### Example 1

```{r fig.width=10}

plot(dat_ginkgo$max_depth, dat_ginkgo$max_width,

main = "Scatterplot of Gingko \n Leaf Depth & Width",

xlab = "Gingko leaf max depth",

ylab = "Gingko leaf max width",

xlim = c(0, 150), ylim = c(0, 130),

col = "purple",

pch = 20,

cex = 1 )
```


### Example 2

```{r fig.width=7}
hist(penguins$flipper_length_mm, breaks = 10)
```

### Example 4

```{r fig.width=7}

boxplot(dat_ginkgo$petiole_length, main = "Ginkgo petiole length" )

ginkgo_pet = dat_ginkgo$petiole_length

boxplot( formula = ginkgo_pet ~ seeds_present, data = dat_ginkgo, main = "conditional boxplot")
```

### Example 5

```{r fig.width=10}

dat_ginkgo = read.csv( here("data",
"ginkgo_data_2021.csv"))

dat_newginkgo = read.csv( here("data",
"ginkgo_data_2022.csv"))

par(mfrow = c(2,2))

hist(dat_newginkgo$max_depth, main = "2022 Ginkgo Leaf Depth")

hist(dat_ginkgo$max_depth, main = "2021 Ginkgo Leaf Depth")

hist(dat_newginkgo$max_width, main = "2022 Ginkgo Leaf Width")

hist(dat_ginkgo$max_width, main = "2021 Ginkgo Leaf Width")
```


## Distribution Functions {.tabset .tabset-pills}

### Key terms

The two parameters of a binomial distribution: n, number of trials, and
P, probability of success for each trial

Combinations- order doesn't matter; permutation: order matters

dnorm gives the density, pnorm gives the distribution function, qnorm
gives the quantile function, and rnorm generates random deviates.

### dnorm()

uses a standard normal with mean = 0 and sd = 1

Example

```{r}
dnorm(.7, 0, 1)

```



### pnorm()

This is for calculating a cumulative distribution

Examples

The probability of observing a value of less than 1.2 from a
normally-distributed population with mean = 2 and standard deviation = 2?
```{r}
pnorm(1.2, mean = 2, sd = 2)

```

The probability of observing a value of greater than 1.2 from a
normally-distributed population with mean = 2 and standard deviation = 2? 
```{r}
# could also use lower.tail = FALSE in code. 

1-pnorm(1.2, mean = 2, sd = 2)
```


### qnorm()

Finds value of a boundary given an area

Example

```{r}
qnorm(0.40,mean=50,sd=2)
```


### dbinom()

Examples The probability of observing a count of exactly 3 successes in
a binomial distribution with parameters n = 4 and p = 0.75? dbinom(x =
3, size = 4, prob = 0.75, log = FALSE)
```{r}
#The probability of observing birds in exactly four of six patches.
dbinom(x=4, size = 6, prob = 2/3, log = FALSE)
```


### pbinom()

Example

The probability of observing a count of 3 successes or fewer in a
binomial distribution with parameters n = 4 and p = 0.75?
```{r}
pbinom(q = 3, size = 4, prob = 0.75, lower.tail = TRUE, log.p = FALSE)

```


### qbinom()
Returns the inverse cumulative density function (cdf)
qbinom(q, size, prob)
x: a vector of numbers.
size: the number of trials.
prob: the probability of success of each trial.

Example
```{r}
qbinom(.26, size=40, prob=.4)
```

