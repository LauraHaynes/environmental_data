par(mfrow = c(3, 1))
hist(dat_hab$elev)
require(here)
dat_hab = read.csv(here("environmental_data" , "data", "hab.sta.csv"))
dat_hab = read.csv(here("environmental_data" , "data", "hab.sta.csv"))
dat_hab = read.csv(here("data", "hab.sta.csv"))
head(dat_hab)
par(mfrow = c(3, 1))
hist(dat_hab$elev)
hist(dat_hab$slope)
hist(dat_hab$aspect)
par(mfrow = c(3, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot)
plot(x = dat_hab$slope, y = dat_hab$ba.tot)
plot(x = dat_hab$aspect, y = dat_hab$ba.tot)
plot(x = dat_hab$elev, y = dat_hab$ba.tot)
plot(x = dat_hab$elev, y = dat_hab$ba.tot)
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
line_point_slope(dat_random$x, guess_x, guess_y, guess_slope)
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
par(mfrow = c(3, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot)
plot(x = dat_hab$slope, y = dat_hab$ba.tot)
plot(x = dat_hab$aspect, y = dat_hab$ba.tot)
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
par(mfrow = c(1, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
par(mfrow = c(3, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
plot(x = dat_hab$slope, y = dat_hab$ba.tot, ylim=c(0,100))
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
par(mfrow = c(1, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
plot(x = dat_hab$slope, y = dat_hab$ba.tot, ylim=c(0,100))
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
require(psych)
pairs.panels(iris)
names(iris)
pairs.panels(iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length")])
require(here)
dat_bird = read.csv(
here("data", "bird.sta.csv")
)
head(dat_bird)
require(here)
dat_hab = read.csv(
here("data", "hab.sta.csv")
)
dat_all = merge(dat_bird , dat_hab, by = c("basin" , "sub" , "sta"))
plot(ba.tot ~ elev, data = dat_all)
#ba.tot is basal area
#below is example from lab instructions
sample(dat_all$CEWA, 100)
dat_all$CEWA >= 1
cewa_present_absent <- as.numeric(dat_all$CEWA >= 1)
plot(x = dat_all$elev, y = cewa_present_absent)
# Function to calculate the logistic parameter a given the slope and midpoint
get_logistic_param_a = function(slope, midpoint)
{
b = slope / 4
return (-midpoint * (slope / 4))
}
# Function to calculate the logistic parameter b given the slope
get_logistic_param_b = function(slope)
{
return (slope / 4)
}
# Calculate the value of the logistic function at x, given the parameters a and b.
logistic = function(x, a, b)
{
val = exp(a + b * x)
return(val / (1 + val))
}
# Calculate the value of the logistic function at x, given a slope and midpoint.
logistic_midpoint_slope = function(x, midpoint, slope)
{
b = get_logistic_param_b(slope)
a = get_logistic_param_a(slope, midpoint)
return(logistic(x, a, b))
}
plot(x = dat_all$elev, y = cewa_present_absent)
curve(logistic_midpoint_slope(x, midpoint = 400, slope = 0.1), add = TRUE)
plot(x = dat_all$elev, y = cewa_present_absent)
curve(logistic_midpoint_slope(x, midpoint = 400, slope = -0.1), add = TRUE)
plot(x = dat_all$elev, y = cewa_present_absent)
curve(logistic_midpoint_slope(x, midpoint = 400, slope = -0.005), add = TRUE)
head(dat_all)
#this is how u can see which sp have the most p/a
apply(dat_bird[, -(1:3)], 2, sum)
#Use the pair plot function from psych to create a pair plot of the three terrain variables (slope, aspect, elevation) and basal area.
pairs.panels(dat_all[, c("slope", "aspect", "elev", "ba.tot")])
plot(x = dat_all$elev, y = cewa_present_absent)
curve(logistic_midpoint_slope(x, midpoint = 400, slope = 0.1), add = TRUE)
plot(x = dat_all$elev, y = cewa_present_absent)
curve(logistic_midpoint_slope(x, midpoint = 400, slope = -0.1), add = TRUE)
dat_all$WIWR >= 1
WIWR_present_absent <- as.numeric(dat_all$WIWR >= 1)
plot(x = dat_all$ba.tot, y = WIWR_present_absent,
title(main="Likelihood of WIWR Occurance") ,
xlab="Total Basal Area", ylab="Winter Wren Presence & Absence",
)
curve(logistic_midpoint_slope(x, midpoint = 100, slope = 0.1), add = TRUE)
dat_all$CBCH >= 1
CBCH_present_absent <- as.numeric(dat_all$CBCH >= 1)
plot(x = dat_all$ba.tot, y = CBCH_present_absent,
xlab="Total Basal Area", ylab="Chestnut-bk Chickadee Presence & Absence",
)
plot(x = dat_all$ba.hard , y = CBCH_present_absent,
title(main="Likelihood of CBCH Occurance") ,
xlab="basal area of hardwoods", ylab="Chestnut-bk Chickadee Presence & Absence"
)
curve(logistic_midpoint_slope(x, midpoint = 75, slope = 0.1), add = TRUE)
sum(dat_all$GRJA)
sum(dat_all$GRJA >= 1)
dat_all$CBCH >= 1
CBCH_present_absent <- as.numeric(dat_all$CBCH >= 1)
plot(x = dat_all$ba.tot, y = CBCH_present_absent,
xlab="Total Basal Area", ylab="Chestnut-bk Chickadee Presence & Absence",
)
plot(x = dat_all$elev, y = cewa_present_absent)
curve(logistic_midpoint_slope(x, midpoint = 400, slope = -0.1), add = TRUE)
# Generate a vector of x-values
x = seq(-3, 3, length.out = 1000)
y = dnorm(x)
plot(x, y, main = "Normal PDF", type = "l")
abline(h = 0)
require(palmerpenguins)
hist(
penguins$body_mass_g,
main = "Histogram of Penguin Body Mass",
xlab = "Body Mass (g)")
mean(penguins$body_mass_g, na.rm = TRUE)
sd(penguins$body_mass_g, na.rm = TRUE)
nrow(penguins)
n_pts        = 344
penguin_mean = 4202
penguin_sd   = 802
dat_1 = rnorm(n = 344, mean = 4202, sd = 802)
dat_2 = rnorm(n = 344, mean = 4202, sd = 802)
dat_3 = rnorm(n = 344, mean = 4202, sd = 802)
dat_4 = rnorm(n = 344, mean = 4202, sd = 802)
par(mfrow = c(2, 2))
hist(dat_1)
hist(dat_2)
hist(dat_3)
hist(dat_4)
dat_unif = runif(n = 27, min = 0, max = 4)
hist(dat_unif)
set.seed(1)
dat_unif_1 = runif(n = 270, min = 0, max = 4)
set.seed(1)
dat_unif_2 = runif(n = 270, min = 0, max = 4)
par(mfrow = c(1, 2))
hist(dat_unif_1)
hist(dat_unif_2)
# Calculates the value of y for a linear function, given the coordinates
# of a known point (x1, y1) and the slope of the line.
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
set.seed(123)
n = 17
slope = 0.7
intcp = 0.2
guess_x = 6
guess_y = 4
guess_slope = 0.72
x = runif(n = n, min = 1, max = 10)
y = rnorm(n = n, mean = slope * x + intcp)
plot(x, y, pch = 16)
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
n_pts = 10
x_min = 1
x_max = 10
# X values are uniformly distributed
x_random = runif(n = n_pts, min = x_min, max = x_max)
# Y values are normally-distributed.
# I used the default parameters for mean and sd.
y_random = rnorm(n = n_pts)
dat_random = data.frame(x = x_random, y = y_random)
plot(y ~ x, data = dat_random, pch = 8)
guess_x = 6
guess_y = 0
guess_slope = 0.1
plot(y ~ x, data = dat_random, pch = 8)
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
line_point_slope(dat_random$x, guess_x, guess_y, guess_slope)
head(penguins)
dat_random$y_predicted = line_point_slope(dat_random$x, guess_x, guess_y, guess_slope)
head(dat_random)
dat_random$resids = y_random - dat_random$y_predicted
sum(dat_random$resids)
abs(dat_random$resids)
plot(x= dat_random$y_predicted, y = dat_random$resids)
hist(x = dat_random$resids)
#Lab Questions Begin here:
require(here)
png(
filename = here("lab_04_hist_01.png" ),
width = 1500, height = 1600,
res = 180, units = "px")
norm_17 = rnorm(n = 17, mean = 10.4 , sd = 2.4)
norm_30 = rnorm(n = 30, mean = 10.4 , sd = 2.4)
norm_300 = rnorm(n = 300, mean = 10.4 , sd = 2.4)
norm_3000 = rnorm(n = 3000, mean = 10.4 , sd = 2.4)
par(mfrow = c(2, 2))
hist(norm_17)
hist(norm_30)
hist(norm_300)
hist(norm_3000)
dev.off()
#Q7
require(here)
svg(
filename = here("norm_1.svg" ))
# Generate a vector of x-values
x = seq(-20, 20, length.out = 1000)
y = dnorm(x, mean = 10.4, sd = 2.4)
plot(x, y, main = "Normal PDF: mean = 10.4 , sd = 2.4", type = "l", xlim = c(0, 20))
abline(h = 0)
dev.off()
#Q9-10 :')
require(here)
png(
filename = here("Q10.png" ),
width = 1500, height = 1600,
res = 180, units = "px")
set.seed(46)
random_1 = runif(n = 10, min = -5, max = 4)
set.seed(1)
random_2 = runif(n = 10, min = -5, max = 4)
par(mfrow = c(2, 2))
head(random_1)
plot(x = random_1, y = random_2, main = ("Random Scatterplot"))
hist(random_2)
hist(random_1)
boxplot(random_1, main = ("Boxplot of random_1"))
dev.off()
#Q11
plot(x = random_1, y = random_2, main = ("Random Scatterplot"))
abline(lm(y ~ x))
#tutorial
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
par(mfrow = c(1, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
par(mfrow = c(3, 1))
hist(dat_hab$elev)
hist(dat_hab$slope)
hist(dat_hab$aspect)
png(
filename = here("W5_hist.png" ),
width = 1500, height = 1600,
res = 180, units = "px")
par(mfrow = c(3, 1))
hist(dat_hab$elev)
hist(dat_hab$slope)
hist(dat_hab$aspect)
dev.off()
par(mfrow = c(1, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$slope, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
par(mfrow = c(1, 3))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$slope, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
par(mfrow = c(3, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$slope, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
png(
filename = here("W5_plot.png" ),
width = 1500, height = 1600,
res = 180, units = "px")
par(mfrow = c(3, 1))
plot(x = dat_hab$elev, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$slope, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
dev.off()
head(dat_hab)
plot(x = dat_hab$aspect, y = dat_hab$ba.tot, ylim=c(0,100))
abline(lm(y ~ x))
summary(lm(y ~ x))$coefficients
?qt()
?qnorm?
?qnorm()
?qnorm()
?qt()
#Q6
qt(c(0.025, 0.975), 49)
#Q6
pt(c(0.025, 0.975), 49)
#Q6
qt(c(0.025, 0.975), df = 49)
sse = ssd/sqrt(49)
ssd = 314
sse = ssd/sqrt(49)
ssd = 3.14
sse = ssd/sqrt(49)
sse = ssd/sqrt(49)
print(sse)
#Q6
sse*qt(c(0.025, 0.975), df = 49)
x = 0:20
barplot(
dbinom(x, size = 20, prob = 0.1),
names.arg = x, space = 0,
main = "Binomial PMF: n = 20, p = 0.1",
ylab = "Pr(x)", xlab = "x = n successes")
set.seed(12345)
sim_population = rbinom(n = 1000000, size = 20, prob = 0.1)
max(sim_population)
set.seed(5431213)
sim_sample = sample(sim_population, size = 20, replace = T)
hist(sim_sample + 0.00001, main = "sample size = 20", xlab = "x")
mean_sampler = function(pop, sample_size, n_means)
{
# pre-allocate a results vector
means = vector(mode = "numeric", length = n_means)
# sampling loop
for (i in 1:n_means)
{
samp = sample(pop, size = sample_size, replace = TRUE)
means[i] = mean(samp)
}
return(means)
}
sample_means = mean_sampler(
pop = sim_population,
sample_size = 30,
n_means = 200)
hist(
sample_means,
main = "Distribution of Sample Means\nsample size: 30, number of means: 200",
xlab = "sample mean")
qnorm(c(0.025, 0.975))
qnorm(c(0.05, 0.95))
?qt()
qt(p=c(0.025, 0.975), df = 10)
qnorm(c(0.025, 0.975))
qt(p=c(0.025, 0.975), df =1000)
#Q6
sse*qt(c(0.025, 0.975), df = 49)
ssd = 3.14
sse = ssd/sqrt(49)
print(sse)
x_observed = c(2, 6)
print(x_observed)
dpois(x = 2, lambda = 4.5)
dpois(x = 6, lambda = 4.5)
dpois(x = 2, lambda = 4.5) * dpois(x = 6, lambda = 4.5)
wiwa_counts = c(2, 6)
dpois(x = wiwa_counts, lambda = 4.5)
prod(dpois(x = wiwa_counts, lambda = 4.5))
sum(log(dpois(x = wiwa_counts, lambda = 4.5)))
dat_bird = read.csv(here::here("environmental_data" , "data", "bird.sta.csv"))
dat_bird = read.csv(here::here("environmental_data" , "data", "bird.sta.csv"))
dat_bird = read.csv(here::here("data", "bird.sta.csv"))
dat_habitat = read.csv(here::here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
summary(dat_all$WIWA)
hist(dat_all$WIWA)
hist(dat_all$WIWA, breaks = 7)
hist(dat_all$WIWA, breaks = 0:7)
hist(dat_all$WIWA, breaks = 0:7 - .5)
par(mfrow = c(1, 2))
dat = dat_all$WIWA
hist(dat, breaks = 0:(max(dat) + 1) - 0.5, main = "Histogram of\nWilson's Warbler counts")
dat = dat_all$GRJA
hist(dat, breaks = 0:(max(dat) + 1) - 0.5, main = "Histogram of\nGray Jay counts")
sum(log(dpois(x = dat_all$WIWA, lambda = 1.0)))
#Q1
wiwa_counts = c(2, 6)
dpois(x = wiwa_counts, lambda = 4)
sum(log(dpois(x = wiwa_counts, lambda = 4))
#Q3
par(mfrow = c(1, 1))
#Q3
par(mfrow = c(1, 1))
hist(dat_all$WIWR)
head(dat_all$WIWR)
hist(dat_all$WIWR, breaks = 0:7 - .5)
dat = dat_all$WIWR
hist(dat, breaks = 0:(max(dat) + 1) - 0.5, main = "Hist. Winter Wren Counts")
#Q5
sum(log(dpois(x = dat_all$WIWR, lambda = 1.46)))
summary(dat_all$WIWR)
set.seed(1)
vec_rnorm = rnorm(n = 10, mean = 0, sd = 1)
